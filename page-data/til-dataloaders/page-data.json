{"componentChunkName":"component---src-templates-blog-post-js","path":"/til-dataloaders/","result":{"data":{"site":{"siteMetadata":{"title":"Bad Access Memories","author":"Francisco Amado"}},"markdownRemark":{"id":"67c77028-0f40-51b5-ad3a-85fba33d0d1e","excerpt":"Saw it initially in gqlgen#Dataloaders but I believe the idea comes from engineering.fb.com. This dataloader sits between the application layer, e.g. a GraphQLâ€¦","html":"<p>Saw it initially in <a href=\"https://gqlgen.com/reference/dataloaders/\">gqlgen#Dataloaders</a> but I believe the idea comes from <a href=\"https://engineering.fb.com/2014/06/10/web/open-sourcing-haxl-a-library-for-haskell/\">engineering.fb.com</a>.</p>\n<p>This dataloader sits between the application layer, e.g. a GraphQL resolver, and the datasource, providing an abstraction to the latter where a single request can represent a batch of multiples.</p>\n<h2>Why does it matter?</h2>\n<p>Having a dataloader:</p>\n<ul>\n<li>avoids redundant fetching of data, as subsequent requests with the same parameters will use the cached result.</li>\n<li>avoids leaking datasource-specific logic, as it abstracts away their interface. One may be dealing with a database, a third-party service, or any other.</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","frontmatter":{"title":"TIL: DataLoaders","date":"November 07, 2022","description":"Reduce requests to the database via batching and caching"}}},"pageContext":{"slug":"/til-dataloaders/","previous":null,"next":{"fields":{"slug":"/til-graphqlswift/"},"frontmatter":{"title":"TIL: Swift GraphQL"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}