{"componentChunkName":"component---src-templates-blog-post-js","path":"/til-tailwind/","result":{"data":{"site":{"siteMetadata":{"title":"Bad Access Memories","author":"Francisco Amado"}},"markdownRemark":{"id":"240ab913-60b1-5fc8-8ec9-efa98d787e30","excerpt":"This static website has been slowly built with Gatsby and Styled components over the years. How it looks has evolved, but maintaining consistency and…","html":"<p>This static website has been slowly built with Gatsby and Styled components over the years. How it looks has evolved, but maintaining consistency and flexibility in styling remains a challenge.</p>\n<p>I’m no expert of CSS, nor do I want to become one. I’m just trying to keep the website looking consistent and flexible while still having some visual identity.</p>\n<p>The website you see here started with a pretty ugly plain HTML, using <a href=\"http://getskeleton.com/\">SkeletonCSS</a>, then moved on to a Gatsby generated website, still using SkeletonCSS. At some point I decided that it was embarassing the codebase was for not taking advantage of what Gatsby offers, and decided to do a refactor with Styled Components.</p>\n<p>It took a lot longer than I expected, and in the end it’s still incovenient when I need to change some styling, because my biggest deficiency is the CSS itself.</p>\n<h2>Enter TailwindCSS</h2>\n<p>If you’ve ever wanted to move quickly with UI design, writing custom styles for each component can become tedious. TailwindCSS offers some utility-first classes, which allows for rapid styling without the overhead of maintaining a separate CSS or knowing all its intrincacies. However, I found out that the resources show how to integrate it into a new crispy clean Gatsby project, like many other tutorials out there, and not into some already built Frankenstein, with Styled Components, Skeleton and some custom CSS. This, required a bit more of consideration (head banging).</p>\n<p>Here’s what went wrong:</p>\n<ul>\n<li>I initially followed the <a href=\"https://shadcn.com/\">Shadcn</a> tutorial, which uses TailwindCSS, but it was expecting some config files to exist already, which only happens if you go through the official tailwindcss setup and most recent Gatsby project generator.</li>\n<li>CSS conflicted with the already existing Skeleton CSS, making it a mess. I opt-out for removing the Skeleton CSS entirely. Sad goodbye.</li>\n<li>Switching from Styled Components to Tailwind led to an inconsistent codebase. Well, it still is inconsistent in the inside, but at least it’s good looking on the outside.</li>\n</ul>\n<p>Integrating TailwindCSS into a Gatsby project built with Styled Components was a challenge in the beginning, but I found myself continuously removing references to the custom styled components I have built, and relying more on the tailwind utility classes. It became easier to change components in-place.</p>\n<h2>Why does it matter?</h2>\n<p>Integrating TailwindCSS into a Gatsby project built with Styled Components was a challenge in the beginning, allows for:</p>\n<ul>\n<li>Rapid Prototyping: Faster UI iteration without writing custom CSS. Thank god for the tailwind IntelliSense!</li>\n<li>Consistency: I like how Tailwind provides a structured utility-based design approach. It really grew on me.</li>\n<li>Extensibility: Combining Tailwind’s utility classes with a component library like <a href=\"https://shadcn.com/\">Shadcn</a> allows me to build complex designs, without the burden of having to learn custom CSS.</li>\n</ul>\n<p>If I was to start a new Gatsby project today, I’d likely opt for TailwindCSS from the beginning, leveraging its utility-first approach while avoiding Styled Components. It’s a great way to maintain a scalable, flexible design system while moving fast and shipping faster.</p>\n<p>I realise it now. I’ve been avoiding learning CSS for the last decade, while still learning it the dumb way.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","frontmatter":{"title":"TIL: tailwindcss","date":"February 15, 2025","description":"For thee who seeketh NOT to master the ungodly art of CSS"}}},"pageContext":{"slug":"/til-tailwind/","previous":{"fields":{"slug":"/til-retool/"},"frontmatter":{"title":"TIL: Retool"}},"next":null}},"staticQueryHashes":["63159454"],"slicesMap":{}}